{"version":3,"file":"static/js/369.aff05dea.chunk.js","mappings":"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","sources":["web/components/login.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { login } from \"../apiServices/home/homeHttpService\";\r\nimport { showAlert } from \"./commonComponent/alertManager\";\r\nimport { useAlert } from \"react-alert\";\r\nimport { RotatingLines } from \"react-loader-spinner\";\r\n\r\nfunction Login() {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    mode: \"onChange\",\r\n  });\r\n  const [type, setType] = useState(\"password\");\r\n  const [loader, setLoader] = useState(false);\r\n  const alert = useAlert();\r\n  const navigate = useNavigate();\r\n\r\n  const typeChange = () => {\r\n    if (type === \"password\") setType(\"text\");\r\n    else {\r\n      setType(\"password\");\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    setLoader(true);\r\n    const response = await login(data);\r\n    if (!response.error) {\r\n      console.log(response);\r\n      localStorage.setItem(\"token-user\", response.results.token);\r\n      navigate(\"/welcome\");\r\n      showAlert(alert, response.message, { timeout: 3000 });\r\n      setLoader(false);\r\n      reset();\r\n    } else {\r\n      showAlert(alert, response.message, { timeout: 3000 });\r\n      setLoader(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <section className=\"login_page\">\r\n        <div className=\"container-fluid px-0\">\r\n          <div className=\"row justify-content-center\">\r\n            <div className=\"col-xxl-4 col-xl-4 col-lg-6 col-md-10 col-11\">\r\n              <div className=\"login_top shadow\">\r\n                <div className=\"login_page_form\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-12 formheader mb-5 text-center\">\r\n                      <h1>Login</h1>\r\n                      <p>Please enter your username and password</p>\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <form\r\n                        className=\"row form-design\"\r\n                        onSubmit={handleSubmit(onSubmit)}\r\n                      >\r\n                        <div className=\"form-group col-12\">\r\n                          <label htmlFor>User Name</label>\r\n                          <input\r\n                            type=\"type\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Username\"\r\n                            name=\"userId\"\r\n                            id=\"userId\"\r\n                            {...register(\"userId\", {\r\n                              required: true,\r\n                            })}\r\n                          />\r\n\r\n                          {errors?.userId && (\r\n                            <p className=\"form-error mt-1\">\r\n                              This field is required\r\n                            </p>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"form-group col-12 position-relative\">\r\n                          <label htmlFor>Password</label>\r\n                          <input\r\n                            type={type}\r\n                            className=\"form-control\"\r\n                            placeholder=\"**********\"\r\n                            name=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"on\"\r\n                            {...register(\"password\", {\r\n                              required: \"This field is required\",\r\n                              // pattern: {\r\n                              //   value:\r\n                              //     /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&#^])[A-Za-z\\d@$!%*?&#^]{8,}$/,\r\n                              //   message:\r\n                              //     \"Password must be 8 characters including one uppercase letter, one special character and alphanumeric characters\",\r\n                              // },\r\n                            })}\r\n                          />\r\n                          <i\r\n                            className={`fa eyepassword fa-eye${\r\n                              type === \"password\" ? \"-slash\" : \"\"\r\n                            }`}\r\n                            onClick={() => typeChange()}\r\n                          ></i>\r\n                          {errors?.password && (\r\n                            <p className=\"form-error\">\r\n                              {errors?.password?.message}\r\n                            </p>\r\n                          )}\r\n                        </div>\r\n\r\n                        <div className=\"form-group col-12 mb-0 mt-2\">\r\n                          <button\r\n                            type=\"submit\"\r\n                            className=\"comman_btn\"\r\n                            disabled={loader}\r\n                          >\r\n                            {loader ? (\r\n                              <div>\r\n                                <span className=\"me-2\">Wait</span>\r\n                                <RotatingLines\r\n                                  strokeColor=\"white\"\r\n                                  strokeWidth=\"5\"\r\n                                  animationDuration=\"0.75\"\r\n                                  width=\"20\"\r\n                                  visible={true}\r\n                                />\r\n                              </div>\r\n                            ) : (\r\n                              <span>Login</span>\r\n                            )}\r\n                          </button>\r\n                        </div>\r\n                      </form>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"],"names":["_errors$password","register","handleSubmit","reset","formState","errors","useForm","mode","type","setType","useState","loader","setLoader","alert","useAlert","navigate","useNavigate","_jsx","_Fragment","children","className","_jsxs","onSubmit","async","response","login","data","error","showAlert","message","timeout","console","log","localStorage","setItem","results","token","htmlFor","placeholder","name","id","required","userId","autoComplete","onClick","password","disabled","RotatingLines","strokeColor","strokeWidth","animationDuration","width","visible"],"sourceRoot":""}