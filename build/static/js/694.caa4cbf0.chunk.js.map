{"version":3,"file":"static/js/694.caa4cbf0.chunk.js","mappings":"4OAkNA,QAxMA,WAA2B,IAADA,EAAAC,EAAAC,EACxB,MAAM,SACJC,EAAQ,aACRC,EAAY,MACZC,EACAC,WAAW,OAAEC,KACXC,EAAAA,EAAAA,IAAQ,CACVC,KAAM,cAEDC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,aAC1BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,aAC5BG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,aAC5BK,EAAQC,IAAaN,EAAAA,EAAAA,WAAS,GAC/BO,GAAQC,EAAAA,EAAAA,MACRC,GAAWC,EAAAA,EAAAA,MAwCjB,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KAEPJ,EAAAA,EAAAA,MAAA,OAAKK,UAAU,aAAYH,SAAA,EACzBC,EAAAA,EAAAA,KAACG,EAAAA,EAAO,KACRH,EAAAA,EAAAA,KAAA,OAAKE,UAAU,oBAAmBH,UAChCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,WAAUH,UACvBC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,SAAQH,UACrBF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,qCAAoCH,SAAA,EACjDC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,2BAA0BH,UACvCC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,WAAUH,UACvBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yBAGRC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,cAAaH,UAC1BF,EAAAA,EAAAA,MAAA,QACEK,UAAU,kBACVE,SAAU1B,GArCX2B,UACf,GAAIC,EAAKC,kBAAoBD,EAAKE,YAEhC,YADAf,EAAMgB,MAAM,sDAGdjB,GAAU,GACV,MAAMkB,QAAiBC,EAAAA,EAAAA,IAAeL,GACjCI,EAASD,QAOZG,EAAAA,EAAAA,GAAUnB,EAAOiB,EAASG,QAAS,CAAEC,QAAS,MAC9CtB,GAAU,KAPVuB,aAAaC,WAAW,cACxBrB,EAAS,iBACTiB,EAAAA,EAAAA,GAAUnB,EAAOiB,EAASG,QAAS,CAAEC,QAAS,MAC9CtB,GAAU,GACVb,IAIF,IAqBiDoB,SAAA,EAEjCF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,yCAAwCH,SAAA,EACrDC,EAAAA,EAAAA,KAAA,SAAOiB,SAAO,EAAAlB,SAAC,kBACfC,EAAAA,EAAAA,KAAA,SACEhB,KAAMA,EACNkB,UAAU,eACVgB,YAAY,aACZC,KAAK,WACLC,GAAG,WACHC,aAAa,QACT5C,EAAS,WAAY,CACvB6C,SAAU,yBACVC,QAAS,CACPC,MACE,2EACFX,QACE,wHAIRb,EAAAA,EAAAA,KAAA,KACEE,UAAW,yBACA,aAATlB,EAAsB,SAAW,IAEnCyC,QAASA,KAhFJxC,EAAZ,aAATD,EAA6B,OAEvB,WA8EsC,KAEvB,OAANH,QAAM,IAANA,OAAM,EAANA,EAAQ6C,YACP1B,EAAAA,EAAAA,KAAA,KAAGE,UAAU,aAAYH,SAChB,OAANlB,QAAM,IAANA,GAAgB,QAAVP,EAANO,EAAQ6C,gBAAQ,IAAApD,OAAV,EAANA,EAAkBuC,cAIzBhB,EAAAA,EAAAA,MAAA,OAAKK,UAAU,yCAAwCH,SAAA,EACrDC,EAAAA,EAAAA,KAAA,SAAOiB,SAAO,EAAAlB,SAAC,kBACfC,EAAAA,EAAAA,KAAA,SACEhB,KAAMG,EACNe,UAAU,eACVgB,YAAY,aACZC,KAAK,cACLC,GAAG,cACHC,aAAa,QACT5C,EAAS,cAAe,CAC1B6C,SAAU,yBACVC,QAAS,CACPC,MACE,2EACFX,QACE,wHAIRb,EAAAA,EAAAA,KAAA,KACEE,UAAW,yBACC,aAAVf,EAAuB,SAAW,IAEpCsC,QAASA,KAzGHrC,EAAZ,aAAVD,EAA+B,OAExB,WAuGsC,KAExB,OAANN,QAAM,IAANA,OAAM,EAANA,EAAQ2B,eACPR,EAAAA,EAAAA,KAAA,KAAGE,UAAU,aAAYH,SAChB,OAANlB,QAAM,IAANA,GAAmB,QAAbN,EAANM,EAAQ2B,mBAAW,IAAAjC,OAAb,EAANA,EAAqBsC,cAI5BhB,EAAAA,EAAAA,MAAA,OAAKK,UAAU,yCAAwCH,SAAA,EACrDC,EAAAA,EAAAA,KAAA,SAAOiB,SAAO,EAAAlB,SAAC,0BACfC,EAAAA,EAAAA,KAAA,SACEhB,KAAMK,EACNa,UAAU,eACVgB,YAAY,aACZC,KAAK,kBACLC,GAAG,kBACHC,aAAa,QACT5C,EAAS,kBAAmB,CAC9B6C,SAAU,yBACVC,QAAS,CACPC,MACE,2EACFX,QACE,wHAIRb,EAAAA,EAAAA,KAAA,KACEE,UAAW,yBACC,aAAVf,EAAuB,SAAW,IAEpCsC,QAASA,KAjIHnC,EAAZ,aAAVD,EAA+B,OAExB,WA+HsC,KAExB,OAANR,QAAM,IAANA,OAAM,EAANA,EAAQ0B,mBACPP,EAAAA,EAAAA,KAAA,KAAGE,UAAU,aAAYH,SAChB,OAANlB,QAAM,IAANA,GAAuB,QAAjBL,EAANK,EAAQ0B,uBAAe,IAAA/B,OAAjB,EAANA,EAAyBqC,cAIhCb,EAAAA,EAAAA,KAAA,OAAKE,UAAU,SAAQH,UACrBC,EAAAA,EAAAA,KAAA,UACEhB,KAAK,SACLkB,UAAU,mBACVyB,SAAUpC,EAAOQ,SAEhBR,GACCM,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,QAAME,UAAU,OAAMH,SAAC,UACvBC,EAAAA,EAAAA,KAAC4B,EAAAA,GAAa,CACZC,YAAY,QACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,QAIbjC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,kCAahC,C","sources":["adminpanel/components/changePassword.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Header from \"./commonComponent/header\";\r\nimport SideBar from \"./commonComponent/sideBar\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useAlert } from \"react-alert\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { changePassword } from \"../apiServices/home/homeHttpService\";\r\nimport { showAlert } from \"./commonComponent/alertManager\";\r\nimport { RotatingLines } from \"react-loader-spinner\";\r\n\r\nfunction ChangePassword() {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    mode: \"onChange\",\r\n  });\r\n  const [type, setType] = useState(\"password\");\r\n  const [type2, setType2] = useState(\"password\");\r\n  const [type3, setType3] = useState(\"password\");\r\n  const [loader, setLoader] = useState(false);\r\n  const alert = useAlert();\r\n  const navigate = useNavigate();\r\n\r\n  const typeChange = () => {\r\n    if (type === \"password\") setType(\"text\");\r\n    else {\r\n      setType(\"password\");\r\n    }\r\n  };\r\n  const typeChange2 = () => {\r\n    if (type2 === \"password\") setType2(\"text\");\r\n    else {\r\n      setType2(\"password\");\r\n    }\r\n  };\r\n\r\n  const typeChange3 = () => {\r\n    if (type3 === \"password\") setType3(\"text\");\r\n    else {\r\n      setType3(\"password\");\r\n    }\r\n  };\r\n  const onSubmit = async (data) => {\r\n    if (data.confirmPassword !== data.newPassword) {\r\n      alert.error(\"New Password & Confirm New Password Should Be Same\");\r\n      return;\r\n    }\r\n    setLoader(true);\r\n    const response = await changePassword(data);\r\n    if (!response.error) {\r\n      localStorage.removeItem(\"token-timp\");\r\n      navigate(\"/admin/login\");\r\n      showAlert(alert, response.message, { timeout: 3000 });\r\n      setLoader(false);\r\n      reset();\r\n    } else {\r\n      showAlert(alert, response.message, { timeout: 3000 });\r\n      setLoader(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n\r\n      <div className=\"admin_main\">\r\n        <SideBar />\r\n        <div className=\"admin_contentpart\">\r\n          <div className=\"row mx-0\">\r\n            <div className=\"col-12\">\r\n              <div className=\"userdetails row align-items-center\">\r\n                <div className=\"col-md-auto mb-md-0 mb-3\">\r\n                  <div className=\"headleft\">\r\n                    <h2>Change Password</h2>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-12 mt-4\">\r\n                  <form\r\n                    className=\"row form-design\"\r\n                    onSubmit={handleSubmit(onSubmit)}\r\n                  >\r\n                    <div className=\"form-group  position-relative col-md-4\">\r\n                      <label htmlFor>Old Password</label>\r\n                      <input\r\n                        type={type}\r\n                        className=\"form-control\"\r\n                        placeholder=\"**********\"\r\n                        name=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"on\"\r\n                        {...register(\"password\", {\r\n                          required: \"This field is required\",\r\n                          pattern: {\r\n                            value:\r\n                              /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&#^])[A-Za-z\\d@$!%*?&#^]{8,}$/,\r\n                            message:\r\n                              \"Password must be 8 characters including one uppercase letter, one special character and alphanumeric characters\",\r\n                          },\r\n                        })}\r\n                      />\r\n                      <i\r\n                        className={`fa eyepassword fa-eye${\r\n                          type === \"password\" ? \"-slash\" : \"\"\r\n                        }`}\r\n                        onClick={() => typeChange()}\r\n                      ></i>\r\n                      {errors?.password && (\r\n                        <p className=\"form-error\">\r\n                          {errors?.password?.message}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                    <div className=\"form-group  position-relative col-md-4\">\r\n                      <label htmlFor>New Password</label>\r\n                      <input\r\n                        type={type2}\r\n                        className=\"form-control\"\r\n                        placeholder=\"**********\"\r\n                        name=\"newPassword\"\r\n                        id=\"newPassword\"\r\n                        autoComplete=\"on\"\r\n                        {...register(\"newPassword\", {\r\n                          required: \"This field is required\",\r\n                          pattern: {\r\n                            value:\r\n                              /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&#^])[A-Za-z\\d@$!%*?&#^]{8,}$/,\r\n                            message:\r\n                              \"Password must be 8 characters including one uppercase letter, one special character and alphanumeric characters\",\r\n                          },\r\n                        })}\r\n                      />\r\n                      <i\r\n                        className={`fa eyepassword fa-eye${\r\n                          type2 === \"password\" ? \"-slash\" : \"\"\r\n                        }`}\r\n                        onClick={() => typeChange2()}\r\n                      ></i>\r\n                      {errors?.newPassword && (\r\n                        <p className=\"form-error\">\r\n                          {errors?.newPassword?.message}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                    <div className=\"form-group  position-relative col-md-4\">\r\n                      <label htmlFor>Confirm New Password</label>\r\n                      <input\r\n                        type={type3}\r\n                        className=\"form-control\"\r\n                        placeholder=\"**********\"\r\n                        name=\"confirmPassword\"\r\n                        id=\"confirmPassword\"\r\n                        autoComplete=\"on\"\r\n                        {...register(\"confirmPassword\", {\r\n                          required: \"This field is required\",\r\n                          pattern: {\r\n                            value:\r\n                              /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&#^])[A-Za-z\\d@$!%*?&#^]{8,}$/,\r\n                            message:\r\n                              \"Password must be 8 characters including one uppercase letter, one special character and alphanumeric characters\",\r\n                          },\r\n                        })}\r\n                      />\r\n                      <i\r\n                        className={`fa eyepassword fa-eye${\r\n                          type2 === \"password\" ? \"-slash\" : \"\"\r\n                        }`}\r\n                        onClick={() => typeChange3()}\r\n                      ></i>\r\n                      {errors?.confirmPassword && (\r\n                        <p className=\"form-error\">\r\n                          {errors?.confirmPassword?.message}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <button\r\n                        type=\"submit\"\r\n                        className=\"comman_btn w-fit\"\r\n                        disabled={loader}\r\n                      >\r\n                        {loader ? (\r\n                          <div>\r\n                            <span className=\"me-2\">Wait</span>\r\n                            <RotatingLines\r\n                              strokeColor=\"white\"\r\n                              strokeWidth=\"5\"\r\n                              animationDuration=\"0.75\"\r\n                              width=\"20\"\r\n                              visible={true}\r\n                            />\r\n                          </div>\r\n                        ) : (\r\n                          <span>Submit</span>\r\n                        )}\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChangePassword;\r\n"],"names":["_errors$password","_errors$newPassword","_errors$confirmPasswo","register","handleSubmit","reset","formState","errors","useForm","mode","type","setType","useState","type2","setType2","type3","setType3","loader","setLoader","alert","useAlert","navigate","useNavigate","_jsxs","_Fragment","children","_jsx","Header","className","SideBar","onSubmit","async","data","confirmPassword","newPassword","error","response","changePassword","showAlert","message","timeout","localStorage","removeItem","htmlFor","placeholder","name","id","autoComplete","required","pattern","value","onClick","password","disabled","RotatingLines","strokeColor","strokeWidth","animationDuration","width","visible"],"sourceRoot":""}