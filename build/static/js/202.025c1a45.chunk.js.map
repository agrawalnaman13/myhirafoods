{"version":3,"file":"static/js/202.025c1a45.chunk.js","mappings":"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","sources":["adminpanel/components/login.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { login } from \"../apiServices/home/homeHttpService\";\r\nimport { showAlert } from \"./commonComponent/alertManager\";\r\nimport { useAlert } from \"react-alert\";\r\nimport { RotatingLines } from \"react-loader-spinner\";\r\n\r\nfunction Login() {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    mode: \"onChange\",\r\n  });\r\n  const [type, setType] = useState(\"password\");\r\n  const [loader, setLoader] = useState(false);\r\n  const alert = useAlert();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"token-timp\")) {\r\n      navigate(\"/admin/dashboard\");\r\n    }\r\n  });\r\n\r\n  const typeChange = () => {\r\n    if (type === \"password\") setType(\"text\");\r\n    else {\r\n      setType(\"password\");\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    setLoader(true);\r\n    const response = await login(data);\r\n    if (!response.error) {\r\n      localStorage.setItem(\"token-timp\", response.results.token);\r\n      navigate(\"/admin/dashboard\");\r\n      showAlert(alert, response.message, { timeout: 3000 });\r\n      setLoader(false);\r\n      reset();\r\n    } else {\r\n      showAlert(alert, response.message, { timeout: 3000 });\r\n      setLoader(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <section className=\"login_page\">\r\n        <div className=\"container-fluid px-0\">\r\n          <div className=\"row justify-content-center\">\r\n            <div className=\"col-xxl-4 col-xl-4 col-lg-6 col-md-10 col-11\">\r\n              <div className=\"login_top shadow\">\r\n                <div className=\"login_page_form\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-12 formheader mb-5 text-center\">\r\n                      <h1>Login for Admin Panel</h1>\r\n                      <p>Please enter your email and password</p>\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                      <form\r\n                        className=\"row form-design\"\r\n                        onSubmit={handleSubmit(onSubmit)}\r\n                      >\r\n                        <div className=\"form-group col-12\">\r\n                          <label htmlFor>User Name</label>\r\n                          <input\r\n                            type=\"email\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"User@gmail.com\"\r\n                            name=\"email\"\r\n                            id=\"email\"\r\n                            {...register(\"email\", {\r\n                              required: \"This field is required\",\r\n                              pattern: {\r\n                                value:\r\n                                  /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n                                message: \"Invalid email address\",\r\n                              },\r\n                            })}\r\n                          />\r\n\r\n                          {errors?.email && (\r\n                            <p className=\"form-error mt-1\">\r\n                              {errors.email.message}\r\n                            </p>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"form-group col-12 position-relative\">\r\n                          <label htmlFor>Password</label>\r\n                          <input\r\n                            type={type}\r\n                            className=\"form-control\"\r\n                            placeholder=\"**********\"\r\n                            name=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"on\"\r\n                            {...register(\"password\", {\r\n                              required: \"This field is required\",\r\n                              pattern: {\r\n                                value:\r\n                                  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&#^])[A-Za-z\\d@$!%*?&#^]{8,}$/,\r\n                                message:\r\n                                  \"Password must be 8 characters including one uppercase letter, one special character and alphanumeric characters\",\r\n                              },\r\n                            })}\r\n                          />\r\n                          <i\r\n                            className={`fa eyepassword fa-eye${\r\n                              type === \"password\" ? \"-slash\" : \"\"\r\n                            }`}\r\n                            onClick={() => typeChange()}\r\n                          ></i>\r\n                          {errors?.password && (\r\n                            <p className=\"form-error\">\r\n                              {errors?.password?.message}\r\n                            </p>\r\n                          )}\r\n                        </div>\r\n                        <div className=\"form-group col-12\">\r\n                          <Link className=\"for_got\" to=\"/admin/forgot-password\">\r\n                            Forgot Password?\r\n                          </Link>\r\n                        </div>\r\n                        <div className=\"form-group col-12 mb-0 mt-2\">\r\n                          <button\r\n                            type=\"submit\"\r\n                            className=\"comman_btn\"\r\n                            disabled={loader}\r\n                          >\r\n                            {loader ? (\r\n                              <div>\r\n                                <span className=\"me-2\">Wait</span>\r\n                                <RotatingLines\r\n                                  strokeColor=\"white\"\r\n                                  strokeWidth=\"5\"\r\n                                  animationDuration=\"0.75\"\r\n                                  width=\"20\"\r\n                                  visible={true}\r\n                                />\r\n                              </div>\r\n                            ) : (\r\n                              <span>Login</span>\r\n                            )}\r\n                          </button>\r\n                        </div>\r\n                      </form>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"],"names":["_errors$password","register","handleSubmit","reset","formState","errors","useForm","mode","type","setType","useState","loader","setLoader","alert","useAlert","navigate","useNavigate","useEffect","localStorage","getItem","_jsx","_Fragment","children","className","_jsxs","onSubmit","async","response","login","data","error","showAlert","message","timeout","setItem","results","token","htmlFor","placeholder","name","id","required","pattern","value","email","autoComplete","onClick","password","Link","to","disabled","RotatingLines","strokeColor","strokeWidth","animationDuration","width","visible"],"sourceRoot":""}